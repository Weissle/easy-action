==============================================================================
------------------------------------------------------------------------------
                                                *easy_action.base_easy_action()*
    `easy_action.base_easy_action`({pre_action}, {rest_action}, {jump_cmd})
The basic function of easy-action.
Parameters~
{pre_action} `(string|nil)` It should be something like y,d. If it is nil, you need to input the pre_action;
{rest_action} `(string|nil)` It should be something like y,d. If it is nil, you need to input the rest_action;
{jump_cmd} `(string|function|nil)` How to jump? If it is nil, it will select the jump command according to your config.

------------------------------------------------------------------------------
                                                 *easy_action.any_easy_action()*
                        `easy_action.any_easy_action`()
easy-action for doing anything.


==============================================================================
------------------------------------------------------------------------------
                                                           *jump.get_jump_cmd()*
                         `jump.get_jump_cmd`({action})
Get the jump cmd according to your action
Parameters~
{action} `(string)`
Return~
`(string|function)`

------------------------------------------------------------------------------
                                                            *jump.do_jump_cmd()*
                         `jump.do_jump_cmd`({jump_cmd})
exec your jump cmd
Parameters~
{jump_cmd} `(string|function)`

------------------------------------------------------------------------------
                                                                   *jump.jump()*
                             `jump.jump`({action})
jump according to your action
Parameters~
{action} `(string)`


==============================================================================
------------------------------------------------------------------------------
                                                           *utils.char_in_str()*
                         `utils.char_in_str`({c}, {s})
check whether a char exists in a string
Parameters~
{c} `(string)` whose length is char1_chars
{s} `(string)`
Return~
`(boolean)`

------------------------------------------------------------------------------
                                                                 *utils.equal()*
                            `utils.equal`({a}, {b})
check if a is equal to b recursivly.
Parameters~
{a} `(any)`
{b} `(any)`
Return~
`(boolean)`

------------------------------------------------------------------------------
                                                          *utils.action_input()*
              `utils.action_input`({continue_chars}, {stop_char})
Get your action input. Return empty string if you press the stop_char.
Parameters~
{continue_chars} `(string)`
{stop_char} `(string)`
Return~
`(string)`

------------------------------------------------------------------------------
                                                        *utils.defer_feedkeys()*
                   `utils.defer_feedkeys`({delay_ms}, {...})
feedkeys after {delay_ms}
Parameters~
{delay_ms} `(number|nil)`
The param of the nvim_feedkeys function

------------------------------------------------------------------------------
                                                                  *utils.call()*
                              `utils.call`({cmd})
run cmd or call cmd()
Parameters~
{cmd} `(function|string)`


 vim:tw=78:ts=8:noet:ft=help:norl: